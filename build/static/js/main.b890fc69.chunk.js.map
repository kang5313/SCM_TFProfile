{"version":3,"sources":["components/profileInfoCollection.js","components/Select.jsx","components/Input.jsx","components/CheckBox.jsx","components/SubmitButton.jsx","components/Button.jsx","components/multiSelectedValue.js","components/helperFunctions.js","containers/FormContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["profileInfo","id","variableName","type","category","startAvailableVersion","endAvailableVersion","stringToDisplay","checked","selectedValue","placeholder","supportedValue","StringToDisplay","defaultValue","Select","props","react_default","a","createElement","className","isMultiple","name","value","onChange","handleChange","disabled","required","multiple","options","map","option","key","label","Input","CheckBox","handleCheckbox","htmlFor","title","reminder","style","float","length","isEdited","Button","width","marginLeft","onClick","handleSelectAll","multiSelectedProfile","multiSelectedPairedProfile","changeAllCheckedBoolean","loadedProfile","changedProfile","forEach","profile","push","compareVersion","v1","v2","v3","split","k","Math","min","i","parseInt","_callee","event","regenerator_default","wrap","_context","prev","next","abrupt","Promise","resolve","reject","parser","DOMParser","file","target","files","reader","FileReader","onload","importedXMLData","textResult","result","XMLResult","parseFromString","techflowVersion","getElementsByTagName","getAttribute","profileName","importedXMLProfile","importedValue","variableValue","childNodes","nodeValue","importedData","selectedTechFlowVersion","fileImported","readAsText","onerror","stop","_callee2","_context2","tsvProfileInfo","profileSequence","profileValue","lines","profileVariableName","slice","techFlowVersion","profileNameFromFile","loadProfileVariableFromFile","line","includes","trim","indexOf","lineData","multi","isMultiSelected","isPairedMulti","tsvData","document","getElementById","data","fileType","profileOptions","profileInfoCollection","_callee3","url","response","responseData","_context3","fetch","sent","text","t0","window","alert","_event$target2","profileData","update","Object","defineProperty","$set","$splice","$push","FormContainer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleVersion","preventDefault","filter","helper","state","exist","currentStateProfile","setState","handleInput","input","then","handleSubmit","fetchBody","selectedVersion","fetchData","method","body","JSON","stringify","mode","headers","Headers","filename","open","importTPROFFile","profileOptionsFromFile","temp_list","fileName","allowed_extensions","Array","file_extension","pop","toLowerCase","parse","backupData","backupImportedVersion","importTSVFile","valueIndex","profileIndex","every","concat","handleProfileName","_event$target","selectAll","newProfile","selectedAll","reset","assign","versionOptions","_this2","selectAllCBStyle","display","onSubmit","onInput","components_Input","components_Select","components_Button","components_CheckBox","SubmitButton","React","Component","styles","fontFamimly","textAlign","App","containers_FormContainer","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b890fc69.chunk.js","sourcesContent":["const profileInfo=[\r\n    {\r\n        \"id\":1,\r\n        \"variableName\":\"TestFacilityName\",\r\n        \"type\":\"text\",\r\n        \"category\":\"Settings\",\r\n        \"startAvailableVersion\":\"0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\",\r\n        \"placeholder\":\"<Enter Customer Facility Name>\",\r\n    },//1\r\n    {   \r\n        \"id\":2,\r\n        \"variableName\":\"techFlow.SupportedTargetPlatform\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"x86\",\"x64\",\"x86,x64\"],\r\n        \"startAvailableVersion\":\"3.10.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//2\r\n    {\r\n        \"id\":3,\r\n        \"variableName\":\"techFlow.SupportedTargetPlatform.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"x86\",\"x64\",\"x86,x64\"],\r\n        \"startAvailableVersion\":\"3.10.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//3\r\n    {\r\n        \"id\":4,\r\n        \"variableName\":\"techFlow.ShowTargetPlatformDropdown\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"Show\",\"Hide\"],\r\n        \"startAvailableVersion\":\"3.10.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//4\r\n    {\r\n        \"id\":5,\r\n        \"variableName\":\"techFlow.ShowTargetPlatformDropdown.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Show\",\"Hide\"],\r\n        \"startAvailableVersion\":\"3.10.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//5\r\n    {\r\n        \"id\":6,\r\n        \"variableName\":\"techFlow.SupportedTargetFramework\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"NF2\",\"NF4\",\"NF2,NF4\"],\r\n        \"startAvailableVersion\":\"3.10.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//6\r\n    {\r\n        \"id\":7,\r\n        \"variableName\":\"techFlow.SupportedTargetFramework.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"NF2\",\"NF4\",\"NF2,NF4\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//7\r\n    {\r\n        \"id\":8,\r\n        \"variableName\":\"ProdSys.DefaultPlatform\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"x86\",\"x64\"],\r\n        \"startAvailableVersion\":\"3.6.0\",\r\n        \"endAvailableVersion\":\"3.9\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//8    \r\n    {\r\n        \"id\":9,\r\n        \"variableName\":\"ProdSys.DefaultPlatform\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"Anything\",\"x86\",\"x64\"],\r\n        \"startAvailableVersion\":\"3.10.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//9\r\n    {\r\n        \"id\":10,\r\n        \"variableName\":\"ProdSys.DefaultPlatform.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"x86\",\"x64\"],\r\n        \"startAvailableVersion\":\"3.10.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//10\r\n    {\r\n        \"id\":11,\r\n        \"variableName\":\"ProdSys.DefaultFramework\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"NF2\",\"NF4\",\"NF2,NF4\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//11\r\n    {\r\n        \"id\":12,\r\n        \"variableName\":\"ProdSys.DefaultFramework.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"NF2\",\"NF4\",\"NF2,NF4\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//12\r\n    {\r\n        \"id\":13,\r\n        \"variableName\":\"Launcher.Wizard.ShowOnlyDefaultProjectTemplate\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"TRUE\",\"FALSE\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//13\r\n    {\r\n        \"id\":14,\r\n        \"variableName\":\"Launcher.Wizard.ForceTargetPlatform\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"x86\",\"x64\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"StringToDisplay\" : \"support from 3.10.0.1 onwards\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//14\r\n    {\r\n        \"id\":15,\r\n        \"variableName\":\"Launcher.Wizard.DefaultTargetPlatform\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"x86\",\"x64\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//15\r\n    {\r\n        \"id\":16,\r\n        \"variableName\":\"Launcher.Wizard.SupportedTargetPlatform\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Any\",\"x86\",\"x64\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//16\r\n    {\r\n        \"id\":17,\r\n        \"variableName\":\"VisualStudio.ProjectTemplatesDir\",\r\n        \"type\":\"text\",\r\n        \"category\":\"Library\",\r\n        \"startAvailableVersion\":\"3.0.1.2\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"..\\\\..\\\\bin\\\\lib\\\\vslib\",\r\n        \"defaultValue\":\"..\\\\..\\\\bin\\\\lib\\\\vslib\"\r\n    },//17\r\n    {\r\n        \"id\":18,\r\n        \"variableName\":\"VisualStudio.DefaultProgrammingLanguage\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Cpp\",\"CppNF4\"],\r\n        \"startAvailableVersion\":\"3.10.0.84\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//18\r\n    {\r\n        \"id\":19,\r\n        \"variableName\":\"VisualStudio.DefaultProjectTemplate.Cpp\",\r\n        \"type\":\"text\",\r\n        \"category\":\"Settings\",\r\n        \"startAvailableVersion\":\"3.0.1.2\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"Default\",\r\n        \"defaultValue\":\"Default\"\r\n    },//19\r\n    {\r\n        \"id\":20,\r\n        \"variableName\":\"VisualStudio.DefaultProjectTemplate.CppNF4\",\r\n        \"type\":\"text\",\r\n        \"category\":\"Settings\",\r\n        \"startAvailableVersion\":\"3.10.0.84\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"Default\",\r\n        \"defaultValue\":\"Default\"\r\n    },//20\r\n    {\r\n        \"id\":21,\r\n        \"variableName\":\"VisualStudio.PreferredIDE.Cpp\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"vc80\",\"vs80\",\"vc90\",\"vs90\"],\r\n        \"startAvailableVersion\":\"3.0.1.13\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//21\r\n    {\r\n        \"id\":22,\r\n        \"variableName\":\"VisualStudio.PreferredIDE.CppNF4\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"vs140\"],\r\n        \"startAvailableVersion\":\"3.10.0.84\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//22\r\n    {\r\n        \"id\":23,\r\n        \"variableName\":\"VisualStudio.GeneratePlatform.Cpp\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"x86\",\"x64\",\"x86,x64\"],\r\n        \"startAvailableVersion\":\"3.10.0.82\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//23\r\n    {\r\n        \"id\":24,\r\n        \"variableName\":\"VisualStudio.GeneratePlatform.CppNF4\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"x86\",\"x64\"],\r\n        \"startAvailableVersion\":\"3.10.0.84\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//24\r\n    {\r\n        \"id\":25,\r\n        \"variableName\":\"techFlow.Settings\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Profile\",\"WinUserRoaming\"],\r\n        \"startAvailableVersion\":\"3.3.1.1496\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//25\r\n    {\r\n        \"id\":26,\r\n        \"variableName\":\"ProdSys.EDReplacement\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Profile\",\"WinUserRoaming\"],\r\n        \"startAvailableVersion\":\"3.4.2.273\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//26\r\n    {\r\n        \"id\":27,\r\n        \"variableName\":\"techFlow.Test.DefaultTestItemPathSelector\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"SetResult\",\"Pass\",\"Fail\",\"OutputPathNumber\",\"ForceDefaultPath\"],\r\n        \"startAvailableVersion\":\"3.7.0.1697\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//27\r\n    {\r\n        \"id\":28,\r\n        \"variableName\":\"techFlow.Test.DefaultTestItemPathSelector.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"SetResult\",\"Pass\",\"Fail\",\"OutputPathNumber\",\"ForceDefaultPath\"],\r\n        \"startAvailableVersion\":\"3.7.0.1697\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//28\r\n    {\r\n        \"id\":29,\r\n        \"variableName\":\"techFlow.Test.LimitInheritResultPrefix\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.5.0.1047\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//29\r\n    {\r\n        \"id\":30,\r\n        \"variableName\":\"techFlow.Test.LimitInheritResultPrefix.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.5.0.1047\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//30\r\n    {\r\n        \"id\":31,\r\n        \"variableName\":\"techFlow.Test.ShowTestNumber\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.5.0.1047\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//31\r\n    {\r\n        \"id\":32,\r\n        \"variableName\":\"techFlow.Test.ShowTestNumber.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.5.0.1047\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//32\r\n    {\r\n        \"id\":33,\r\n        \"variableName\":\"techFlow.Test.TestNumberMode\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"Classic\",\"UserDefined\"],\r\n        \"startAvailableVersion\":\"3.6.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//33\r\n    {\r\n        \"id\":34,\r\n        \"variableName\":\"techFlow.Test.TestNumberMode.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Classic\",\"UserDefined\"],\r\n        \"startAvailableVersion\":\"3.6.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//34\r\n    {\r\n        \"id\":35,\r\n        \"variableName\":\"techFlow.Test.GradingTestShareTestNumber\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.5.0.1047\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//35\r\n    {\r\n        \"id\":36,\r\n        \"variableName\":\"techFlow.Test.GradingTestShareTestNumber.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.5.0.1047\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//36\r\n    {\r\n        \"id\":37,\r\n        \"variableName\":\"techFlow.CreateDebugGlobalVariable\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"DontBother\",\"AlwaysCreate\"],\r\n        \"startAvailableVersion\":\"3.7.0.1674\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//37\r\n    {\r\n        \"id\":38,\r\n        \"variableName\":\"techFlow.CreateDebugGlobalVariable.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"DontBother\",\"AlwaysCreate\"],\r\n        \"startAvailableVersion\":\"3.7.0.1674\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//38\r\n    {\r\n        \"id\":39,\r\n        \"variableName\":\"techFlow.DefaultDebugGlobalVariableValue\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"0\",\"1\"],\r\n        \"startAvailableVersion\":\"3.7.0.1674\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//39\r\n    {\r\n        \"id\":40,\r\n        \"variableName\":\"techFlow.DefaultDebugGlobalVariableValue.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"0\",\"1\"],\r\n        \"startAvailableVersion\":\"3.7.0.1674\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//40\r\n    {\r\n        \"id\":41,\r\n        \"variableName\":\"techFlow.ShowDebugDropdown\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"Show\",\"Hide\"],\r\n        \"startAvailableVersion\":\"3.7.0.1674\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//41\r\n    {\r\n        \"id\":42,\r\n        \"variableName\":\"techFlow.ShowDebugDropdown.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Show\",\"Hide\"],\r\n        \"startAvailableVersion\":\"3.7.0.1674\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//42\r\n    {\r\n        \"id\":43,\r\n        \"variableName\":\"techFlow.ShowFlowEditorUponRecipeLoaded\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Inherit\",\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.10.1.1998\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//43\r\n    {\r\n        \"id\":44,\r\n        \"variableName\":\"techFlow.ShowFlowEditorUponRecipeLoaded.IfParentNotFound\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"3.10.1.1998\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//44\r\n    {\r\n        \"id\":45,\r\n        \"variableName\":\"Launcher.ShowRTDP\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//45\r\n    {\r\n        \"id\":46,\r\n        \"variableName\":\"Launcher.ShowProjectHistory\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"Show\",\"Hide\",\"HideIfRTDP\"],\r\n        \"startAvailableVersion\":\"3.6.0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//46\r\n    {\r\n        \"id\":47,\r\n        \"variableName\":\"SiteGroup.IncludeExcludeDUTBasedOnCommitResult\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"True\",\"False\"],\r\n        \"startAvailableVersion\":\"0\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":\"\"\r\n    },//47\r\n    {\r\n        \"id\":48,\r\n        \"variableName\":\"techFlow.SupportedOperationMode\",\r\n        \"type\":\"select\",\r\n        \"category\":\"Settings\",\r\n        \"supportedValue\":[\"SingleSite\",\"TrueParallel\",\"IndexParallel\"],\r\n        \"startAvailableVersion\":\"3.10.0.1\",\r\n        \"endAvailableVersion\":\"9999.9999.9999.9999\",\r\n        \"stringToDisplay\" : \"\",\r\n        \"checked\":false,\r\n        \"selectedValue\":[]\r\n    },//48\r\n]\r\n\r\nexport default profileInfo","import React from 'react'\r\n\r\nconst Select = props=>{\r\n    return(\r\n        <div className=\"form-group\">\r\n            <select\r\n                id={props.id}\r\n                type={props.isMultiple?\"select-multiple\":\"select-one\"}\r\n                name={props.name}\r\n                value={props.value}\r\n                onChange={props.handleChange}\r\n                className=\"form-control\"\r\n                disabled={props.disabled}\r\n                required={true}\r\n                multiple={props.isMultiple}\r\n            >\r\n                <option value=\"\" disabled>\r\n                    {props.placeholder}\r\n                </option>\r\n                {props.options.map(option=>{\r\n                        return (\r\n                        <option value={option} key={option} label={option}>\r\n                            {option}    \r\n                        </option>)\r\n                })}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Select","import React from \"react\"\r\nconst Input = props=>{\r\n    return(\r\n        <div className=\"form-group\">\r\n            <input \r\n                id={props.id}\r\n                type={props.type}\r\n                className=\"form-control\"\r\n                name={props.name}\r\n                value={props.value}\r\n                placeholder={props.placeholder}\r\n                onChange={props.handleChange}\r\n                disabled={props.disabled}\r\n                required={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React from \"react\";\r\n\r\nconst CheckBox = props =>{\r\n    const style = {\r\n        float:\"right\"\r\n    }\r\n    return(\r\n        <div>\r\n            <input\r\n                key={props.id}\r\n                id={props.id}\r\n                onChange={props.handleCheckbox}\r\n                checked={props.checked}\r\n                type=\"checkbox\"\r\n                className={\"form-checkbox-input\"}\r\n            />\r\n            <label htmlFor={props.name}>{props.title}</label>\r\n            <label htmlFor=\"reminder\">{props.reminder}</label>\r\n            <label style={style}>\r\n                 <i className={props.value.length!==0&&!props.isEdited&&props.checked?\"fas fa-check-circle\":\r\n                (props.value.length===0&&props.checked?\"fas fa-question-circle\":\r\n                (props.isEdited&&props.checked?\"fas fa-exclamation-circle\":\r\n                (!props.checked?\"fas fa-circle\":\"\")))}>\r\n                 </i> \r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckBox","import React from \"react\"\r\n\r\nconst Button = props =>{\r\n    return(\r\n        <button\r\n            className={props.name}\r\n            type={props.type}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\"\r\n\r\nconst style={width:\"15em\",marginLeft:\"0.5em\"}\r\nconst Button = props =>{\r\n    return(\r\n        <button\r\n            className={props.name}\r\n            onClick={props.handleSelectAll}\r\n            checked={props.checked}\r\n            style={style}\r\n        >\r\n            {props.title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","const multiSelectedProfile = [\"techFlow.SupportedOperationMode\"]    //Profile with multi-selected value\r\n\r\nconst multiSelectedPairedProfile = [] //Paired Profile (profile with .IfParentNotFound) with multi-selected value\r\n\r\nexport  {multiSelectedProfile,\r\n        multiSelectedPairedProfile}","import * as multi from \"./multiSelectedValue\"\r\nimport profileInfoCollection from './profileInfoCollection'\r\n\r\n/*  A function to change all the profileInfo status to unchecked (used when importXMLfile)    */\r\nfunction changeAllCheckedBoolean (loadedProfile){\r\n    let changedProfile = [] \r\n    loadedProfile.forEach(profile=>{\r\n        profile.checked = false\r\n        changedProfile.push(profile)\r\n    })\r\n    return changedProfile\r\n}\r\n\r\n/*  This function handles the comparison of versions to determine whether the profile should be supported in this version or not\r\n    v1 as selected version , v2 as start supporting version , v3 as end supporting version\r\n */\r\nfunction compareVersion(v1, v2, v3) {\r\n    if (typeof v1 !== 'string') return false;\r\n    if (typeof v2 !== 'string') return false;\r\n    if (typeof v3 !== 'string') return false;\r\n    v1 = v1.split('.');\r\n    v2 = v2.split('.');\r\n    v3 = v3.split('.');\r\n    const k = Math.min(v1.length, v2.length, v3.length);\r\n    for (let i = 0; i < k; ++ i) {\r\n        v1[i] = parseInt(v1[i], 10);\r\n        v2[i] = parseInt(v2[i], 10);\r\n        v3[i] = parseInt(v3[i], 10);\r\n        if (v1[i] > v2[i] && v1[i]<v3[i]) return 1  //if the selected version is between the start and end supporting version then it's available\r\n        if (v1[i] < v2[i] || v1[i]>v3[i]) return -1      //else it's not available\r\n    }\r\n     /* After the for loop is over, \r\n     if v1's length is same with v2's length then both of them are exactly the same,\r\n     else, v2 is a child version of v1.*/\r\n    return v1.length === v2.length ? 0: 2\r\n}\r\n\r\n/*This function is used to parse the .tprof file in the frontend.\r\n  A FileReader is used to read the .tprof file. The \"name\" and \"selectedTechFlowVersion\" attribute in \"profile\" tag , value in \"variable\" tag are \r\n  selected and store in a Javascript object(importedData). Promise is used in this function to ensure the data are completely loaded from the XML before \"importedData\" is returned.\r\n*/\r\nasync function readTPROF(event){\r\n    return new Promise((resolve,reject)=>{\r\n        let parser = new DOMParser()\r\n        var file = event.target.files\r\n        var reader = new FileReader();\r\n        reader.onload =() =>\r\n            {\r\n                let importedXMLData = []\r\n                let textResult = reader.result\r\n                let XMLResult = parser.parseFromString(textResult,\"text/xml\")\r\n                let techflowVersion = XMLResult.getElementsByTagName(\"profile\")[0].getAttribute(\"selectedTechFlowVersion\")\r\n                let profileName = XMLResult.getElementsByTagName(\"profile\")[0].getAttribute(\"name\")\r\n                let importedXMLProfile = XMLResult.getElementsByTagName(\"variable\")\r\n                let importedValue = XMLResult.getElementsByTagName(\"value\")\r\n                for(var i=0;i<importedValue.length;i++){\r\n                    importedXMLData.push({\r\n                        \"name\":importedXMLProfile[i].getAttribute(\"name\"),\r\n                        \"variableValue\":importedValue[i].childNodes[0].nodeValue\r\n                    })\r\n                }\r\n                let importedData = {\r\n                    \"value\":importedXMLData,\r\n                    \"selectedTechFlowVersion\":techflowVersion,\r\n                    \"profileName\":profileName,\r\n                    \"fileImported\":file[0].name\r\n                }\r\n                resolve(importedData)\r\n            }\r\n        if(file.length!==0) {reader.readAsText(file[0]); reader.onerror = reject}\r\n    })\r\n}\r\n\r\nasync function readTSV(event){\r\n    return new Promise((resolve,reject)=>\r\n    {\r\n        let tsvProfileInfo = []\r\n        let file = event.target.files\r\n        let reader = new FileReader()\r\n        let profileOptionsFromFile = []\r\n        let profileSequence = []    //Store the index of profileInfo(from read .tsv file) in the array of profileOptionsFromFile , to solve the profile sequence depedency problem\r\n        reader.onload = () =>\r\n        {\r\n            let textResult = reader.result\r\n            let profileName = \"\"\r\n            let profileValue = \"\"\r\n            const lines = textResult.split('\\n')\r\n            const profileVariableName = (lines.slice(0,1)[0].split('\\t')[1])\r\n            const techFlowVersion = (lines.slice(1,2)[0].split('\\t')[1])\r\n            profileOptionsFromFile = loadProfileVariableFromFile(\"\",techFlowVersion,\"tsv\")  //Load the available profileInfo from profileCollection.js\r\n            const profileNameFromFile = profileOptionsFromFile.map(profile=>profile.variableName)\r\n            lines.slice(2,lines.length).forEach(line=>{\r\n                if(profileNameFromFile.includes(line.split('\\t')[0]))\r\n                {\r\n                    profileName = line.split('\\t')[0].trim()\r\n                    profileValue = line.split('\\t')[1].trim()\r\n                    profileSequence.push(profileNameFromFile.indexOf(profileName))\r\n                    let lineData =      //data extracted from each line in the imported tsv file\r\n                    {\r\n                        \"name\":profileName,\r\n                        \"variableValue\": multi.multiSelectedProfile.includes(profileName)?profileValue.split(\",\") : profileValue.trim(),\r\n                        \"isMultiSelected\": multi.multiSelectedProfile.includes(profileName),\r\n                        \"isPairedMulti\":multi.multiSelectedPairedProfile.includes(profileName)\r\n                    }\r\n                    tsvProfileInfo.push(lineData)\r\n                }\r\n            })\r\n            const tsvData = {\r\n                \"value\":tsvProfileInfo,\r\n                \"profileName\":profileVariableName,\r\n                \"selectedTechFlowVersion\":techFlowVersion,\r\n                \"fileImported\":file[0].name,\r\n                \"profileSequence\":profileSequence\r\n            }\r\n            document.getElementById(\"xmlFileToUpload\").value=\"\"\r\n            resolve(tsvData)\r\n        }\r\n        if(file.length!==0) {reader.readAsText(file[0]); reader.onerror = reject}\r\n    })\r\n}\r\n\r\n\r\n//Use the profile variable name to load the corresponding profile into object. Return the object and insert into state\r\nfunction loadProfileVariableFromFile(data,value,fileType){\r\n    let profileOptions = []\r\n    let i = 0\r\n    \r\n    if(fileType === \"tprof\")\r\n    {\r\n        changeAllCheckedBoolean(profileInfoCollection).forEach(profile=>{\r\n             //the profile is available for this version\r\n            if(compareVersion(value,profile.startAvailableVersion,profile.endAvailableVersion)>=0){\r\n                if(profile.variableName === data[i])\r\n                {\r\n                    profile.checked = true\r\n                    i++\r\n                }\r\n\r\n                // the profile is only available from the mentioned child version of this version\r\n                if(compareVersion(value,profile.startAvailableVersion,profile.endAvailableVersion)===2) \r\n                {profile.stringToDisplay = \"support from \"+profile.startAvailableVersion+\" onwards.\"}\r\n\r\n                else\r\n                {profile.stringToDisplay = \"\"}\r\n\r\n                profileOptions.push(profile)\r\n            }\r\n        })\r\n        return profileOptions\r\n    }\r\n    else if (fileType === \"tsv\")\r\n    {\r\n        changeAllCheckedBoolean(profileInfoCollection).forEach(profile=>{\r\n            if(compareVersion(value,profile.startAvailableVersion,profile.endAvailableVersion)>=0)\r\n            {\r\n                // the profile is only available from the mentioned child version of this version\r\n                if(compareVersion(value,profile.startAvailableVersion,profile.endAvailableVersion)===2) \r\n                {profile.stringToDisplay = \"support from \"+profile.startAvailableVersion+\" onwards.\"}\r\n\r\n                else\r\n                {profile.stringToDisplay = \"\"}\r\n                profile.checked = true\r\n                profileOptions.push(profile)\r\n            }\r\n        })\r\n        return profileOptions\r\n    }\r\n}\r\n\r\n/*this function takes backend port as url parameter and the FETCH data info as data parameter.\r\n  It return the backend generate profile xml filename after the data is fetched and processeed at backend.\r\n*/\r\nasync function fetchDataToBackend(url,data){\r\n    try\r\n        {\r\n            let response = await fetch(url,data)\r\n            let responseData = await response.text()\r\n            return responseData\r\n        }\r\n    catch(error)\r\n        {\r\n            window.alert(error)\r\n        }\r\n}\r\n\r\nexport {\r\n    changeAllCheckedBoolean,\r\n    compareVersion,\r\n    readTPROF,\r\n    readTSV,\r\n    loadProfileVariableFromFile,\r\n    fetchDataToBackend\r\n\r\n}\r\n","import React from 'react'\r\nimport profileInfoCollection from '../components/profileInfoCollection'\r\nimport Select from '../components/Select'\r\nimport Input from '../components/Input'\r\nimport CheckBox from \"../components/CheckBox\"\r\nimport SubmitButton from \"../components/SubmitButton\"\r\nimport Button from \"../components/Button\"\r\nimport update from \"immutability-helper\"\r\nimport * as multi from \"../components/multiSelectedValue\"\r\nimport * as helper from \"../components/helperFunctions.js\"\r\n\r\nasync function input (profileInfo,event){\r\n    const {id,value,type,checked} = event.target\r\n        let profileData = []\r\n        if (type === \"select-one\" || type === \"text\")  \r\n        {\r\n            profileData = await update(profileInfo,{[id]:{selectedValue:{$set:value},isEdited:{$set:true}}})\r\n        }\r\n        else if(type === \"checkbox\")\r\n        {\r\n            profileData = await update(profileInfo,{[id]:{checked:{$set:checked}}})\r\n        }\r\n        else if (type === \"select-multiple\")\r\n        {\r\n            profileData = profileInfo[id].selectedValue.includes(value)?\r\n                          await update(profileInfo,{[id]:{selectedValue:{$splice:[[profileInfo[id].selectedValue.indexOf(value),1]]},isEdited:{$set:true}}}):\r\n                          await update(profileInfo,{[id]:{selectedValue:{$push:[value]},isEdited:{$set:true}}})\r\n        }\r\n        return profileData\r\n}\r\n\r\nclass FormContainer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            profileInfo:[],\r\n            selectedVersion:\"\",\r\n            versionOptions:[\"3.6.0\",\"3.6.1\",\"3.7.0\",\"3.10.0\",\"3.10.1\",\"3.11.0\",\"3.11.1\",\"3.11.2\"],\r\n            profileName:\"\",\r\n            disabled:false,\r\n            fileImported:\"\",\r\n            selectedAll:false\r\n        }\r\n    }\r\n    /*  This function handles the selection of versions. \r\n        The profileInfoCollection will be mapped and compareVersion function will be called to filter the profile to be selected.\r\n    */\r\n    handleVersion = (event) =>{\r\n        event.preventDefault()\r\n        let value = event.target.value\r\n        let name = event.target.name\r\n        let profileOptions = []\r\n\r\n        //the profile is available for this version\r\n        profileInfoCollection\r\n        .filter(profile=>helper.compareVersion(value,profile.startAvailableVersion,profile.endAvailableVersion)>=0)\r\n        .forEach(profile=>\r\n        {\r\n            if(this.state.fileImported!==\"\")\r\n            {\r\n                let exist = false\r\n                this.state.profileInfo.forEach(currentStateProfile=>{\r\n                    if(currentStateProfile.variableName === profile.variableName){\r\n                        exist = true\r\n                    }\r\n                })\r\n                if(!exist){profile.checked =true}\r\n            }\r\n            else{\r\n                profile.checked =true\r\n            }\r\n            \r\n            // the profile is only available from the mentioned child version of this version\r\n            if(helper.compareVersion(value,profile.startAvailableVersion,profile.endAvailableVersion)===2) \r\n            {\r\n                profile.stringToDisplay = \"support from \"+profile.startAvailableVersion+\" onwards.\"\r\n            }\r\n            else\r\n            {\r\n                profile.stringToDisplay = \"\"\r\n            }\r\n            profile.isMultiSelected = (multi.multiSelectedProfile.includes(profile.variableName))?true:false\r\n            profileOptions.push(profile)\r\n        })\r\n\r\n        this.setState({\r\n                profileInfo:profileOptions,\r\n                [name]:value\r\n            }\r\n        )\r\n    }\r\n    \r\n    //This function handles user input and change the corresponding data in profileInfoCollection according to the input type.\r\n    handleInput = (event) =>{\r\n        input(this.state.profileInfo,event)\r\n        .then(profileData =>{\r\n            this.setState({\r\n                profileInfo:profileData\r\n            })}\r\n        )\r\n    }\r\n\r\n    handleSubmit = (event) =>{\r\n        let profileData = this.state.profileInfo\r\n        let fetchBody = []\r\n        for(var i = this.state.profileInfo.length-1;i>=0;i--){\r\n            if(this.state.profileInfo[i].checked===false){\r\n                profileData = update(profileData,{$splice:[[i,1]]})\r\n            }\r\n        }\r\n        fetchBody.push(profileData)\r\n        fetchBody.push(this.state.selectedVersion)\r\n        fetchBody.push(this.state.profileName)\r\n        let url = \"http://localhost:8000\"\r\n        let fetchData = {\r\n            method: 'POST',\r\n            body: JSON.stringify(fetchBody),\r\n            mode:'cors',\r\n            headers: new Headers()\r\n        }\r\n        helper.fetchDataToBackend(url,fetchData)\r\n        .then(filename=>{\r\n            window.open(url+\"/xml/\"+filename)\r\n        })\r\n        document.getElementById(\"xmlFileToUpload\").value=\"\"\r\n        document.getElementById(\"tsvFileToUpload\").value=\"\"\r\n        event.preventDefault();\r\n        this.setState({ \r\n            profileInfo: [],\r\n            selectedVersion:\"\",\r\n            profileName:\"\"\r\n        })\r\n    }\r\n\r\n    /*  User imports tprof file. Based the techflow version in tprof file import the relevant profile into the form.\r\n        Should be updated to import profile according to the profile name in the xml\r\n    */\r\n    importTPROFFile = (event) => {\r\n        let profileOptionsFromFile = []\r\n        let i = 0\r\n        let profileValue\r\n        let temp_list = {}\r\n        let profileVariableName = []\r\n        let fileName = event.target.value\r\n        let allowed_extensions = new Array(\"tprof\");\r\n\r\n        /* split function will split the filename by dot(.), and pop function will pop the last element from the array which will give you the extension as well. \r\n        If there will be no extension then it will return the filename.*/\r\n        let file_extension = fileName.split('.').pop().toLowerCase();\r\n\r\n            if(allowed_extensions[i] === file_extension)\r\n            {\r\n                helper.readTPROF(event)\r\n                .then(importedData => {\r\n                    importedData[\"value\"].forEach(profile=>{\r\n                        profileVariableName.push(profile[\"name\"])\r\n                    })\r\n                    profileOptionsFromFile = helper.loadProfileVariableFromFile(profileVariableName,importedData[\"selectedTechFlowVersion\"],allowed_extensions[i])\r\n                    profileOptionsFromFile.filter(profile => profile.checked === true).forEach(profile => {\r\n                        if(multi.multiSelectedProfile.includes(profile.variableName)){\r\n                            profileValue = (importedData[\"value\"][i][\"variableValue\"]).split(\",\")\r\n                        }\r\n                        else{\r\n                            profileValue = importedData[\"value\"][i][\"variableValue\"]\r\n                        }\r\n                        profile.selectedValue = profileValue\r\n                        profile.isEdited = false\r\n                        i++\r\n                    })                    \r\n                    temp_list = JSON.parse(JSON.stringify(profileOptionsFromFile))  //for backup data\r\n                    document.getElementById(\"tsvFileToUpload\").value = \"\"\r\n                    this.setState({\r\n                        selectedVersion:importedData[\"selectedTechFlowVersion\"],\r\n                        profileName:importedData[\"profileName\"],\r\n                        profileInfo:profileOptionsFromFile,\r\n                        fileImported:importedData[\"fileImported\"],\r\n                        backupData:temp_list,\r\n                        backupImportedVersion:importedData[\"selectedTechFlowVersion\"]\r\n                    })})\r\n            }\r\n            else{\r\n                window.alert(\"This file type is not supported\")\r\n                document.getElementById(\"xmlFileToUpload\").value=\"\"\r\n                document.getElementById(\"tsvFileToUpload\").value=\"\"\r\n                this.setState({\r\n                    selectedVersion:\"\",\r\n                    profileName:\"\",\r\n                    profileInfo:[],\r\n                    fileImported:\"\"\r\n                })\r\n            }\r\n    }\r\n\r\n    /*  Import data from the uploaded TSV file and populate into the form\r\n        After the data is loaded from the TSV file, there are few conditions for handling the loaded data.\r\n\r\n        First , If the profile info input type is SELECT and (&&) the loaded profile value is appropriate (found in the supported value array) or (||) the imported profile is multiple\r\n         or (||) the input type is text -----(1), then the position of current profile in the profile array is checked.----(2)\r\n\r\n            If the imported profile is with multieple selection , then check whether it's a paired profileInfo(with .IfParentNotFound)\r\n                If the imported selectedValueis supported then set the value , else left it blank - (5)\r\n            Else repeat (5)\r\n        \r\n            If the current profile is the last element in the array , then the profile selectedValue will be set to the loaded profile value,\r\n            Else , check if the next profile name is in the format of (\"current profile name\".IfParentNotFound) then the current profile selectedValue will be set to Inherit and the next profile selectedValue will be set to the loaded value.---(3)\r\n\r\n        Else (for (1) condition ), the loaded profile value is found to be inappropriate (not found in the supported value array),\r\n        then the current profile and next profile(under the condition if next profile name is in the format mentioned above) is set to empty (\"\")\r\n\r\n        After populate, a set of deep copied backup and the techFlow version backup are saved to perform the reset function\r\n    */\r\n    importTSVFile = (event) =>{\r\n        let i = 0\r\n        let fileName = event.target.value\r\n        var allowed_extensions = new Array(\"tsv\")\r\n        var file_extension = fileName.split('.').pop().toLowerCase()\r\n        let temp_list = []\r\n        let profileOptionsFromFile = []\r\n        let valueIndex  = 0\r\n\r\n        if(allowed_extensions[i]===file_extension){\r\n            helper.readTSV(event)\r\n            .then(importedData =>{\r\n                profileOptionsFromFile = helper.loadProfileVariableFromFile(\"\",importedData[\"selectedTechFlowVersion\"],allowed_extensions[i])\r\n                let profileSequence = importedData[\"profileSequence\"]\r\n                profileSequence.forEach(profileIndex=>{\r\n                    \r\n                    if(((profileOptionsFromFile[profileIndex].type===\"select\")\r\n                        &&((profileOptionsFromFile[profileIndex].supportedValue).includes(importedData[\"value\"][valueIndex][\"variableValue\"])||importedData[\"value\"][valueIndex][\"isMultiSelected\"]))\r\n                        ||(profileOptionsFromFile[profileIndex].type===\"text\"&&profileOptionsFromFile[profileIndex].selectedValue!==\"\"))\r\n                    {    \r\n                        if(importedData[\"value\"][valueIndex][\"isMultiSelected\"]){\r\n                            profileOptionsFromFile[profileIndex].isMultiSelected = true\r\n                            if((importedData[\"value\"][valueIndex][\"isPairedMulti\"])){\r\n                                profileOptionsFromFile[profileIndex+1].isMultiSelected = true\r\n                                if((importedData[\"value\"][valueIndex][\"variableValue\"]).every(value=>(profileOptionsFromFile[profileIndex+1].supportedValue).includes(value))){\r\n                                    profileOptionsFromFile[profileIndex].selectedValue = [\"Inherit\"]\r\n                                    profileOptionsFromFile[profileIndex+1].selectedValue = importedData[\"value\"][valueIndex][\"variableValue\"]\r\n                                    profileOptionsFromFile[profileIndex].isEdited = false\r\n                                    profileOptionsFromFile[profileIndex+1].isEdited = false\r\n                                    valueIndex++\r\n                                    return\r\n                                }\r\n\r\n                                profileOptionsFromFile[profileIndex].selectedValue = []\r\n                                profileOptionsFromFile[profileIndex+1].selectedValue = []\r\n                                valueIndex++\r\n                                return\r\n                            }\r\n                            if((importedData[\"value\"][valueIndex][\"variableValue\"]).every(value=>(profileOptionsFromFile[profileIndex].supportedValue).includes(value))){\r\n                                profileOptionsFromFile[profileIndex].selectedValue = importedData[\"value\"][valueIndex][\"variableValue\"]\r\n                                valueIndex++\r\n                                return\r\n                            }\r\n                            else{\r\n                                profileOptionsFromFile[profileIndex].selectedValue = []\r\n                                valueIndex++\r\n                                return\r\n                            }\r\n                        }\r\n                        profileOptionsFromFile[profileIndex].selectedValue = importedData[\"value\"][valueIndex][\"variableValue\"]\r\n                        profileOptionsFromFile[profileIndex].isEdited = false\r\n                        if(profileIndex!==profileOptionsFromFile.length-1&&(profileOptionsFromFile[profileIndex+1].variableName)===(profileOptionsFromFile[profileIndex].variableName).concat(\".IfParentNotFound\")){\r\n                                profileOptionsFromFile[profileIndex].selectedValue = \"Inherit\"\r\n                                profileOptionsFromFile[profileIndex+1].selectedValue = importedData[\"value\"][valueIndex][\"variableValue\"]\r\n                                profileOptionsFromFile[profileIndex].isEdited = false\r\n                                profileOptionsFromFile[profileIndex+1].isEdited = false\r\n                        }\r\n                    }\r\n                    else{\r\n                        profileOptionsFromFile[profileIndex].selectedValue = \"\"\r\n                        profileOptionsFromFile[profileIndex].checked = false\r\n                        if(profileIndex!==profileOptionsFromFile.length-1\r\n                            &&(profileOptionsFromFile[profileIndex+1].variableName)===(profileOptionsFromFile[profileIndex].variableName).concat(\".IfParentNotFound\"))\r\n                        {\r\n                            profileOptionsFromFile[profileIndex+1].selectedValue = \"\"\r\n                            profileOptionsFromFile[profileIndex+1].checked = false\r\n                        }\r\n                    }\r\n                    valueIndex++\r\n                })\r\n                temp_list = JSON.parse(JSON.stringify(profileOptionsFromFile)) //temp_list as a backup data for RESET function\r\n                document.getElementById(\"xmlFileToUpload\").value=\"\"\r\n                this.setState({\r\n                    selectedVersion:importedData[\"selectedTechFlowVersion\"].trim(),\r\n                    profileName:importedData[\"profileName\"].trim(),\r\n                    profileInfo:profileOptionsFromFile,\r\n                    fileImported:importedData[\"fileImported\"],\r\n                    backupData:temp_list,\r\n                    backupImportedVersion:importedData[\"selectedTechFlowVersion\"].trim()\r\n                })\r\n            })\r\n        }\r\n        /* Error handling for the inappropriate file type*/\r\n        else{\r\n            window.alert(\"This file type is not supported\")\r\n            document.getElementById(\"xmlFileToUpload\").value=\"\"\r\n            document.getElementById(\"tsvFileToUpload\").value=\"\"\r\n            this.setState({\r\n                selectedVersion:\"\",\r\n                profileName:\"\",\r\n                profileInfo:[],\r\n                fileImported:\"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    handleProfileName = (event) =>{\r\n        const {value,name} = event.target\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n\r\n    selectAll = (event) =>{\r\n        event.preventDefault()\r\n        let checked = event.target.checked\r\n        let profileData = []\r\n        this.state.profileInfo.forEach(profile=>{\r\n                let newProfile = update(profile,{checked:{$set:checked}})  \r\n                profileData.push(newProfile)\r\n        })\r\n        checked = !checked\r\n        this.setState({\r\n            profileInfo:profileData,\r\n            selectedAll:checked\r\n        })\r\n    }\r\n\r\n    reset = (event) =>{\r\n        let profileOptionsFromFile = []\r\n        let profileData = []\r\n        event.preventDefault()\r\n        if(this.state.fileImported!==\"\"){\r\n            profileOptionsFromFile = this.state.backupData\r\n            this.setState({\r\n                profileInfo:profileOptionsFromFile,\r\n                selectedVersion:this.state.backupImportedVersion\r\n            })\r\n        }\r\n        else{\r\n            this.state.profileInfo.forEach(profile=>{\r\n                let newProfile\r\n                if(!profile.defaultValue){\r\n                    if(profile.isMultiSelected)\r\n                    {\r\n                        newProfile = Object.assign({},profile,{selectedValue:[]},{checked:true})\r\n                    } \r\n                    else\r\n                    {\r\n                        newProfile = Object.assign({},profile,{selectedValue:\"\"},{checked:true})\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    newProfile =Object.assign({},profile,{selectedValue:profile.defaultValue},{checked:true})\r\n                }\r\n                profileData.push(newProfile)\r\n            })\r\n            this.setState({\r\n                profileInfo:profileData\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        //Rendering the component based on the component's input type.\r\n        const selectAllCBStyle = this.state.selectedVersion===\"\"?{display:'none'}:{}\r\n        return(    \r\n            <form className=\"container-fluid\" onSubmit={this.handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>Import TPROF : </label>\r\n                    <input type=\"file\" className =\"form-control mb-5\" name=\"xmlFile-to-upload\" id=\"xmlFileToUpload\" onInput={this.importTPROFFile} /*onChange={this.validate_fileUpload}*/></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Import TSV : </label>\r\n                    <input type=\"file\" className =\"form-control mb-5\" name=\"tsvFile-to-upload\" id=\"tsvFileToUpload\" onInput={this.importTSVFile} /*onChange={this.validate_fileUpload}*/></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Name : </label>\r\n                    <Input\r\n                        type={\"text\"}\r\n                        name={\"profileName\"}\r\n                        value={this.state.profileName}\r\n                        placeholder={\"<Enter the profile name>\"}\r\n                        handleChange={this.handleProfileName}\r\n                    />\r\n                </div>\r\n                <label>TechFlow Version : </label>\r\n                <Select\r\n                    title={\"Select TechFlow's Version \"}\r\n                    name={\"selectedVersion\"}\r\n                    options={this.state.versionOptions}\r\n                    value={this.state.selectedVersion}\r\n                    placeholder={\"Select Version\"}\r\n                    handleChange={this.handleVersion}\r\n                />\r\n                <hr/>\r\n                <div style={selectAllCBStyle}>\r\n                    <Button\r\n                        id={\"selectAllBtn\"}\r\n                        name={\"btn btn-primary\"}\r\n                        title={this.state.selectedAll?\"Select All\":\"Deselect All\"}\r\n                        handleSelectAll={this.selectAll}\r\n                        checked={this.state.selectedAll}\r\n                    />\r\n                    <Button\r\n                        id={\"resetBtn\"}\r\n                        name={\"btn btn-primary\"}\r\n                        title={\"Reset\"}\r\n                        handleSelectAll={this.reset}\r\n                    />\r\n                </div>\r\n                <br/>\r\n                {this.state.profileInfo.map((profile,i)=>{\r\n                    if(profile.type===\"select\"){\r\n                        return(\r\n                            <div key={this.state.profileInfo[i].id}>                               \r\n                                 <label>{i+1}</label>\r\n                                 <br/>\r\n                                 <div className=\"form-group\">\r\n                                    <CheckBox\r\n                                        id={i}\r\n                                        handleCheckbox={this.handleInput}\r\n                                        checked={profile.checked}\r\n                                        title={profile.variableName}\r\n                                        reminder={profile.stringToDisplay}\r\n                                        isEdited={profile.isEdited}\r\n                                        value={profile.selectedValue}\r\n                                    />\r\n                                    <Select\r\n                                        id={i}\r\n                                        name={\"selectedValue\"}\r\n                                        checked={profile.checked}\r\n                                        options={profile.supportedValue}\r\n                                        value={profile.selectedValue}\r\n                                        placeholder={\"Select Value\"}\r\n                                        handleChange={this.handleInput}\r\n                                        disabled={!profile.checked}\r\n                                        isMultiple={multi.multiSelectedProfile.includes(profile.variableName)?true:false}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                        return(\r\n                            <div key={this.state.profileInfo[i].id}>\r\n                                <label>{i+1} </label>\r\n                                <br/>\r\n                                <div className=\"form-group\">\r\n                                <CheckBox\r\n                                        id={i}\r\n                                        handleCheckbox={this.handleInput}\r\n                                        checked={profile.checked}\r\n                                        title={profile.variableName}\r\n                                        reminder={profile.stringToDisplay}\r\n                                        isEdited={profile.isEdited}\r\n                                        value={profile.selectedValue}\r\n                                />\r\n                                <Input\r\n                                    id={i}\r\n                                    type={\"text\"}\r\n                                    name={\"selectedValue\"}\r\n                                    value={profile.selectedValue}\r\n                                    checked={profile.checked}\r\n                                    placeholder={profile.placeholder}\r\n                                    handleChange={this.handleInput}\r\n                                    disabled={!profile.checked}\r\n                                />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                }\r\n                )}\r\n                <SubmitButton \r\n                    type = {\"submit\"}\r\n                    name={\"btn btn-primary\"}\r\n                    title={\"Submit\"}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default FormContainer","import React, { Component } from 'react';\r\nimport './CSS/App.css';\r\nimport FormContainer from './containers/FormContainer'\r\n\r\nconst styles = {\r\n  fontFamimly:\"sans-serif\",\r\n  textAlign:\"center\",\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"col-sm-12\">\r\n        <h1 style={styles}>TechFlow Profile</h1>\r\n        <FormContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}